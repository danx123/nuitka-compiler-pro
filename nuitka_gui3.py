import sys
import os
import subprocess
import threading
from PyQt6.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QPushButton, QLineEdit,
    QFileDialog, QTextEdit, QCheckBox, QLabel, QGroupBox, QDialog, QFormLayout,
    QDialogButtonBox
)
from PyQt6.QtCore import QObject, pyqtSignal, QThread

# --- Kelas Baru: Jendela Dialog untuk Generator Versi ---
class VersionDialog(QDialog):
    def __init__(self, parent=None, script_path=None, existing_version_file=None):
        super().__init__(parent)
        self.setWindowTitle("Version.txt Generator / Editor")
        self.script_path = script_path
        self.saved_path = None

        # Definisikan field-field yang akan dibuat
        self.fields = {
            "FileVersion": QLineEdit(),
            "ProductVersion": QLineEdit(),
            "ProductName": QLineEdit(),
            "CompanyName": QLineEdit(),
            "FileDescription": QLineEdit(),
            "InternalName": QLineEdit(),
            "OriginalFilename": QLineEdit(),
            "LegalCopyright": QLineEdit(),
        }

        # Setup Layout
        layout = QVBoxLayout(self)
        form_layout = QFormLayout()
        for label, editor in self.fields.items():
            editor.setPlaceholderText(f"Isi {label}...")
            form_layout.addRow(label, editor)
        
        layout.addLayout(form_layout)

        # Tombol Auto-fill
        self.autofill_button = QPushButton("Auto-fill dari Nama Script")
        self.autofill_button.clicked.connect(self.autofill_from_script)
        if not self.script_path:
            self.autofill_button.setEnabled(False)
            self.autofill_button.setToolTip("Pilih script Python di jendela utama terlebih dahulu")
        
        # Tombol Simpan & Batal
        button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Save | QDialogButtonBox.StandardButton.Cancel)
        button_box.accepted.connect(self.accept)
        button_box.rejected.connect(self.reject)

        # Gabungkan semua
        h_layout = QHBoxLayout()
        h_layout.addWidget(self.autofill_button)
        h_layout.addStretch()
        layout.addLayout(h_layout)
        layout.addWidget(button_box)
        
        self.setMinimumWidth(450)

        # Jika ada file versi, load datanya
        if existing_version_file and os.path.exists(existing_version_file):
            self.load_data(existing_version_file)

    def load_data(self, file_path):
        """Membaca file version.txt dan mengisi form."""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#'):
                        key, value = line.split('=', 1)
                        if key.strip() in self.fields:
                            self.fields[key.strip()].setText(value.strip())
        except Exception as e:
            print(f"Error loading version file: {e}") # Bisa diganti dengan message box

    def autofill_from_script(self):
        """Mengisi beberapa field berdasarkan nama script."""
        if not self.script_path:
            return
        
        base_name = os.path.basename(self.script_path)
        script_name_no_ext = os.path.splitext(base_name)[0]
        
        product_name = script_name_no_ext.replace('_', ' ').replace('-', ' ').title()
        
        self.fields["ProductName"].setText(product_name)
        self.fields["InternalName"].setText(script_name_no_ext)
        self.fields["OriginalFilename"].setText(f"{script_name_no_ext}.exe")
        self.fields["FileDescription"].setText(f"{product_name} Application")
        if not self.fields["FileVersion"].text():
            self.fields["FileVersion"].setText("1.0.0.0")
        if not self.fields["ProductVersion"].text():
            self.fields["ProductVersion"].setText("1.0.0.0")

    def accept(self):
        """Dipanggil saat tombol Save ditekan."""
        default_filename = "version.txt"
        if self.script_path:
            default_path = os.path.join(os.path.dirname(self.script_path), default_filename)
        else:
            default_path = default_filename
            
        file_path, _ = QFileDialog.getSaveFileName(self, "Simpan sebagai...", default_path, "Text Files (*.txt)")

        if file_path:
            try:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write("# Auto-generated by Nuitka GUI\n")
                    for label, editor in self.fields.items():
                        f.write(f"{label}={editor.text()}\n")
                self.saved_path = file_path
                super().accept() # Tutup dialog
            except Exception as e:
                # Sebaiknya tampilkan pesan error ke user di sini
                print(f"Gagal menyimpan file: {e}")


# --- Worker Thread (Tidak Berubah) ---
class CompilerWorker(QObject):
    progress_update = pyqtSignal(str)
    finished = pyqtSignal(str)
    # ... (kode di sini sama persis seperti sebelumnya, jadi saya singkat) ...
    def __init__(self, command): super().__init__(); self.command = command
    def run(self):
        try:
            self.process = subprocess.Popen(self.command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True, encoding='utf-8', errors='replace', shell=True, creationflags=subprocess.CREATE_NO_WINDOW)
            while True:
                output = self.process.stdout.readline()
                if output == '' and self.process.poll() is not None: break
                if output: self.progress_update.emit(output.strip())
            self.process.wait(); rc = self.process.poll()
            if rc == 0: self.finished.emit("\n--- KOMPILASI SUKSES! ---")
            else: self.finished.emit(f"\n--- KOMPILASI GAGAL (Error Code: {rc}) ---")
        except Exception as e: self.finished.emit(f"\n--- TERJADI ERROR KRITIS ---\n{str(e)}")


# --- Jendela Utama Aplikasi (Dimodifikasi) ---
class NuitkaGui(QWidget):
    def __init__(self):
        super().__init__()
        self.thread = None
        self.worker = None
        self.initUI()

    def initUI(self):
        self.setWindowTitle('Nuitka GUI Setup Tool')
        self.setGeometry(100, 100, 800, 700)
        main_layout = QVBoxLayout()

        # Input & Output Group (Tidak berubah)
        io_group = QGroupBox("Input & Output")
        io_layout = QVBoxLayout()
        self.script_path_layout = self.create_file_selector("Pilih Script Python (.py)", self.select_script, "Pilih file Python...")
        io_layout.addLayout(self.script_path_layout)
        self.output_dir_layout = self.create_file_selector("Output Direktori", self.select_output_dir, "Pilih folder output...", is_folder=True)
        io_layout.addLayout(self.output_dir_layout)
        io_group.setLayout(io_layout)
        main_layout.addWidget(io_group)

        # Opsi Kompilasi Group (Tidak berubah)
        options_group = QGroupBox("Opsi Kompilasi")
        options_layout = QVBoxLayout()
        self.onefile_check = QCheckBox("Mode One-File (satu .exe)")
        self.onefile_check.setToolTip("Jika tidak dicentang, akan menghasilkan folder (One-Directory)")
        self.disable_console_check = QCheckBox("Sembunyikan Jendela Konsol")
        options_layout.addWidget(self.onefile_check)
        options_layout.addWidget(self.disable_console_check)
        self.icon_path_layout = self.create_file_selector("Pilih Ikon (.ico)", self.select_icon, "Pilih file ikon...")
        options_layout.addLayout(self.icon_path_layout)
        options_group.setLayout(options_layout)
        main_layout.addWidget(options_group)

        # --- MODIFIKASI: Bagian Informasi Versi ---
        version_group = QGroupBox("Informasi Versi Aplikasi")
        version_layout = QHBoxLayout()
        self.version_file_edit = QLineEdit() # Diubah jadi QLineEdit langsung
        self.version_file_edit.setPlaceholderText("Pilih atau buat file versi...")
        version_gen_button = QPushButton("Buat / Edit File Versi...")
        version_gen_button.clicked.connect(self.open_version_generator)
        version_layout.addWidget(QLabel("File Versi:"))
        version_layout.addWidget(self.version_file_edit)
        version_layout.addWidget(version_gen_button)
        version_group.setLayout(version_layout)
        main_layout.addWidget(version_group)

        # ... (Sisa kode UI sama seperti sebelumnya) ...
        data_group = QGroupBox("Sertakan File & Folder Tambahan")
        data_layout = QVBoxLayout()
        data_layout.addWidget(QLabel("Sertakan File (pisahkan dengan koma):"))
        self.include_files_edit = QLineEdit(); self.include_files_edit.setPlaceholderText("contoh: gambar.png,data/config.json"); data_layout.addWidget(self.include_files_edit)
        data_layout.addWidget(QLabel("Sertakan Folder (pisahkan dengan koma):"))
        self.include_dirs_edit = QLineEdit(); self.include_dirs_edit.setPlaceholderText("contoh: assets,templates"); data_layout.addWidget(self.include_dirs_edit)
        data_group.setLayout(data_layout)
        main_layout.addWidget(data_group)
        log_group = QGroupBox("Log Kompilasi")
        log_layout = QVBoxLayout()
        self.log_output = QTextEdit(); self.log_output.setReadOnly(True); self.log_output.setStyleSheet("background-color: #2b2b2b; color: #f0f0f0; font-family: Consolas, monaco, monospace;"); log_layout.addWidget(self.log_output)
        log_group.setLayout(log_layout)
        main_layout.addWidget(log_group)
        control_layout = QHBoxLayout()
        self.preview_cmd_button = QPushButton("Lihat Perintah"); self.preview_cmd_button.clicked.connect(self.preview_command)
        self.clear_log_button = QPushButton("Bersihkan Log"); self.clear_log_button.clicked.connect(self.clear_log)
        self.compile_button = QPushButton("Mulai Kompilasi"); self.compile_button.setStyleSheet("background-color: #4CAF50; color: white; font-weight: bold;"); self.compile_button.clicked.connect(self.run_compilation)
        control_layout.addWidget(self.preview_cmd_button); control_layout.addWidget(self.clear_log_button); control_layout.addStretch(); control_layout.addWidget(self.compile_button)
        main_layout.addLayout(control_layout)
        self.setLayout(main_layout)

    # --- FUNGSI BARU: Untuk membuka dialog generator ---
    def open_version_generator(self):
        script_path = self.script_path_layout.itemAt(1).widget().text()
        current_version_file = self.version_file_edit.text()
        
        dialog = VersionDialog(self, script_path=script_path, existing_version_file=current_version_file)
        if dialog.exec(): # Menampilkan dialog dan menunggu ditutup
            # Jika user menekan "Save"
            if dialog.saved_path:
                self.version_file_edit.setText(dialog.saved_path)

    def create_file_selector(self, label_text, connect_func, placeholder, is_folder=False):
        layout = QHBoxLayout()
        label = QLabel(label_text); line_edit = QLineEdit(); line_edit.setPlaceholderText(placeholder)
        button = QPushButton("Browse..."); button.clicked.connect(lambda: connect_func(line_edit))
        layout.addWidget(label); layout.addWidget(line_edit); layout.addWidget(button)
        return layout

    def select_script(self, line_edit):
        fname, _ = QFileDialog.getOpenFileName(self, 'Pilih Script Python', '', 'Python Files (*.py *.pyw)')
        if fname: line_edit.setText(fname)

    def select_icon(self, line_edit):
        fname, _ = QFileDialog.getOpenFileName(self, 'Pilih File Ikon', '', 'Icon Files (*.ico)')
        if fname: line_edit.setText(fname)

    def select_output_dir(self, line_edit):
        dname = QFileDialog.getExistingDirectory(self, 'Pilih Direktori Output')
        if dname: line_edit.setText(dname)

    def build_command(self):
        script_path = self.script_path_layout.itemAt(1).widget().text()
        if not script_path:
            self.log_output.append("<font color='red'>ERROR: Script Python belum dipilih!</font>"); return None

        command = ["python", "-m", "nuitka", f'"{script_path}"']
        
        command.append("--standalone")
        if self.onefile_check.isChecked(): command.append("--onefile")
        if self.disable_console_check.isChecked(): command.append("--windows-disable-console")

        output_dir = self.output_dir_layout.itemAt(1).widget().text()
        if output_dir: command.append(f'--output-dir="{output_dir}"')

        icon_path = self.icon_path_layout.itemAt(1).widget().text()
        if icon_path: command.append(f'--windows-icon-from-ico="{icon_path}"')
            
        # --- LOGIKA build_command sedikit dimodifikasi untuk membaca dari QLineEdit baru ---
        version_file_path = self.version_file_edit.text()
        if version_file_path and os.path.exists(version_file_path):
            try:
                version_map = {"FileVersion": "--windows-file-version", "ProductVersion": "--windows-product-version", "ProductName": "--windows-product-name", "CompanyName": "--windows-company-name", "FileDescription": "--windows-file-description", "InternalName": "--windows-internal-name", "OriginalFilename": "--windows-original-filename", "LegalCopyright": "--windows-legal-copyright"}
                with open(version_file_path, 'r', encoding='utf-8') as f:
                    for line in f:
                        line = line.strip()
                        if line and not line.startswith('#'):
                            key, value = line.split('=', 1); key, value = key.strip(), value.strip()
                            if key in version_map: command.append(f'{version_map[key]}="{value}"')
            except Exception as e: self.log_output.append(f"<font color='orange'>WARNING: Gagal memproses file versi: {e}</font>")
        
        # ... (Sisa fungsi build_command tidak berubah) ...
        include_files = self.include_files_edit.text().strip()
        if include_files:
            for item in include_files.split(','): item = item.strip(); command.append(f'--include-data-file="{item}={os.path.basename(item)}"')
        include_dirs = self.include_dirs_edit.text().strip()
        if include_dirs:
            for item in include_dirs.split(','): item = item.strip(); command.append(f'--include-data-dir="{item}={item}"')
        command.extend(["--show-progress", "--show-memory", "--jobs=4", "--remove-output"])
        return " ".join(command)
        
    def preview_command(self): command = self.build_command(); self.log_output.append(f"\n--- Perintah yang akan dijalankan ---\n{command}\n-------------------------------------\n")
    def clear_log(self): self.log_output.clear()
    def run_compilation(self):
        command_str = self.build_command();
        if not command_str: return
        self.clear_log(); self.log_output.append(f"--- Memulai Proses Kompilasi ---\nPerintah: {command_str}\n")
        self.compile_button.setEnabled(False); self.compile_button.setText("Mengompilasi...")
        self.thread = QThread(); self.worker = CompilerWorker(command_str); self.worker.moveToThread(self.thread)
        self.thread.started.connect(self.worker.run); self.worker.finished.connect(self.compilation_finished); self.worker.progress_update.connect(self.update_log)
        self.thread.start()
    def update_log(self, text): self.log_output.append(text)
    def compilation_finished(self, message):
        self.log_output.append(f"<font color='lime'>{message}</font>"); self.compile_button.setEnabled(True); self.compile_button.setText("Mulai Kompilasi")
        self.thread.quit(); self.thread.wait()

def main():
    app = QApplication(sys.argv)
    ex = NuitkaGui()
    ex.show()
    sys.exit(app.exec())

if __name__ == '__main__':
    main()